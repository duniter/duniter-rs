stages:
    - no_ci
    - fmt
    - tests
    - clippy
    - package
    - publish_crate
    - publish_doc 
    - prerelease
    - release

variables:
  CARGO_HOME: $CI_PROJECT_DIR/cargo

.ci_conditions: &ci_only_conditions
    changes:
      - .gitlab-ci.yml
      - Cargo.toml
      - Cargo.lock
      - bin/**/*
      - lib/**/*
      - release/**/*

.ci_except_conditions: &ci_except_conditions
    variables:
      - $CI_COMMIT_MESSAGE =~ /^wip*/i

block_ci:
  only:
    <<: *ci_except_conditions
  stage: no_ci
  when: manual
  allow_failure: false
  script:
    - exit -1

skip_ci:
  except:
    <<: *ci_only_conditions
  stage: no_ci
  when: manual
  script:
    - echo 1

.rust_stable_lin64: &rust_stable_lin64
  only:
    <<: *ci_only_conditions
  except:
    <<: *ci_except_conditions
  image: registry.duniter.org/docker/duniter-rs-ci:v1.35.0
  tags:
    - axiom-dev
  before_script:
    - export PATH="$HOME/.cargo/bin:$PATH"
    - rustup show
    - rustc --version && cargo --version

.rust_nightly_lin64: &rust_nightly_lin64
  only:
    <<: *ci_only_conditions
  except:
    <<: *ci_except_conditions
  image: rustlang/rust:nightly
  tags:
    - axiom-dev
  before_script:
    - export PATH="$HOME/.cargo/bin:$PATH"
    - rustc --version && cargo --version

.rust_stable_armv7: &rust_stable_armv7
  only:
    <<: *ci_only_conditions
  except:
    <<: *ci_except_conditions
  image: registry.duniter.org/docker/rust/armv7-builder:v1.35.0
  tags:
    - axiom-dev
  before_script:
    - rustc --version && cargo --version

.rust_stable_win64: &rust_stable_win64
  only:
    <<: *ci_only_conditions
  except:
    <<: *ci_except_conditions
  image: registry.duniter.org/docker/rust/win64-builder:v1.35.0
  tags:
    - axiom-dev
  before_script:
    - rustc --version && cargo --version

fmt:
  <<: *rust_stable_lin64
  stage: fmt
  before_script:
    - cargo fmt -- --version
  script:
    - cargo fmt -- --check
    
tests:linux64:stable:
  <<: *rust_stable_lin64
  stage: tests
  tags:
    - axiom-dev
  script: 
    - cd bin/durs-server
    - RUSTFLAGS="-D warnings" cargo build --features=ssl
    - cargo test --all
    - cargo test --all -- --ignored

tests:arm-v7-:stable:
  <<: *rust_stable_armv7
  stage: tests
  allow_failure: true
  when: manual
  only:
    <<: *ci_only_conditions
  except:
    <<: *ci_except_conditions
    refs:
      - tags
  script: 
    - cd bin/durs-server
    - RUSTFLAGS="-D warnings" cargo build --target=armv7-unknown-linux-gnueabihf --features=ssl
    - cargo test --all --target=armv7-unknown-linux-gnueabihf

tests:arm-v7:stable:
  <<: *rust_stable_armv7
  stage: tests
  only:
    - tags
  script: 
    - cd bin/durs-server
    - RUSTFLAGS="-D warnings" cargo build --target=armv7-unknown-linux-gnueabihf --features=ssl
    - cargo test --all --target=armv7-unknown-linux-gnueabihf

tests:win64:stable:
  <<: *rust_stable_win64
  stage: tests
  script: 
    - cd bin/durs-server
    - RUSTFLAGS="-D warnings" cargo build --target=x86_64-pc-windows-gnu
    - cargo test --package durs --target=x86_64-pc-windows-gnu
    - cargo test --package durs-conf --target=x86_64-pc-windows-gnu
    - cargo test --package durs-core --target=x86_64-pc-windows-gnu
    - cargo test --package durs-message --target=x86_64-pc-windows-gnu
    - cargo test --package durs-module --target=x86_64-pc-windows-gnu
    - cargo test --package durs-network --target=x86_64-pc-windows-gnu
    - cargo test --package durs-blockchain --target=x86_64-pc-windows-gnu
    - cargo test --package durs-blockchain-dal --target=x86_64-pc-windows-gnu
    #- cargo test --package durs-skeleton-module --target=x86_64-pc-windows-gnu
    - cargo test --package durs-ws2p-v1-legacy --target=x86_64-pc-windows-gnu
    - cargo test --package durs-ws2p --target=x86_64-pc-windows-gnu
    - cargo test --package durs-ws2p-messages --target=x86_64-pc-windows-gnu
    - cargo test --package dup-crypto --target=x86_64-pc-windows-gnu
    - cargo test --package durs-common-tools --target=x86_64-pc-windows-gnu
    - cargo test --package dubp-documents --target=x86_64-pc-windows-gnu
    - cargo test --package json-pest-parser --target=x86_64-pc-windows-gnu
    - cargo test --package durs-network-documents --target=x86_64-pc-windows-gnu
    - cargo test --package rules-engine --target=x86_64-pc-windows-gnu
    - cargo test --package durs-wot --target=x86_64-pc-windows-gnu

clippy:
  <<: *rust_stable_lin64
  before_script:
    - cargo clippy -- -V
  stage: clippy
  script:
    - cargo clippy --all -- -D warnings --verbose

publish:crate:
  <<: *rust_stable_lin64
  stage: publish_crate
  when: manual
  allow_failure: true
  only:
    - tags
  script:
    - IFS='/' read -r first a <<< "$CI_COMMIT_TAG"
    - cd $first
    - cargo login $DUNITER_CRATES_TOKEN
    - cargo publish

package:test:linux64:
  <<: *rust_stable_lin64
  stage: package
  when: manual
  only:
    <<: *ci_only_conditions
  except:
    <<: *ci_except_conditions
    refs:
      - tags
  script:
    - bash "release/arch/linux-x64/build-lin-x64.sh" "$(date +%Y%m%d).$(date +%H%M).$(date +%S)"
  cache:
    paths:
      - cargo/
      - target/
  artifacts:
    paths:
      - work/bin/
    expire_in: 1 weeks

package:test:docker-test-image:
  stage: package
  only:
    <<: *ci_only_conditions
  except:
    <<: *ci_except_conditions
    refs:
      - dev
      - tags
  when: manual
  image: docker:18.06
  tags:
    - axiom-dev
  services:
    - docker:18.06-dind
  variables:
    #DOCKER_TLS_CERTDIR: "/certs"
    #DOCKER_DRIVER: overlay2
    LAST_COMMIT_HASH: $CI_COMMIT_SHORT_SHA
  before_script:
    - docker info
  script:
    - docker build -f release/docker/Dockerfile .
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:test-image" -f release/docker/Dockerfile .
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker push "$CI_REGISTRY_IMAGE:test-image"

package:test:docker:
  stage: package
  only:
    <<: *ci_only_conditions
    refs:
      - dev
  except:
    <<: *ci_except_conditions
    refs:
      - tags
  image: docker:18.06
  tags:
    - axiom-dev
  services:
    - docker:18.06-dind
  variables:
    #DOCKER_TLS_CERTDIR: "/certs"
    #DOCKER_DRIVER: overlay2
    LAST_COMMIT_HASH: $CI_COMMIT_SHORT_SHA
  script:
    - docker build -f release/docker/Dockerfile .
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:dev" -f release/docker/Dockerfile .
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker push "$CI_REGISTRY_IMAGE:dev"

package:test:armv7:
  <<: *rust_stable_armv7
  stage: package
  when: manual
  only:
    <<: *ci_only_conditions
  except:
    <<: *ci_except_conditions
    refs:
      - tags
  script:
    - bash "release/arch/armv7/build-armv7.sh" "$(date +%Y%m%d).$(date +%H%M).$(date +%S)"
  cache:
    paths:
      - cargo/
      - target/
  artifacts:
    paths:
      - work/bin/
    expire_in: 1 weeks

package:test:win64:
  <<: *rust_stable_win64
  stage: package
  when: manual
  only:
    <<: *ci_only_conditions
  except:
    <<: *ci_except_conditions
    refs:
      - tags
  script:
    - bash "release/arch/win64/build-win64.sh" "$(date +%Y%m%d).$(date +%H%M).$(date +%S)"
  cache:
    paths:
      - cargo/
      - target/
  artifacts:
    paths:
      - work/bin/
    expire_in: 1 weeks

package:prod:linux64:
  <<: *rust_stable_lin64
  stage: package
  only:
    - tags
  script:
    - bash "release/arch/linux-x64/build-lin-x64.sh" "${CI_COMMIT_TAG#v}"
  artifacts:
    paths:
      - work/bin/
    expire_in: 2 weeks

package:prod:docker:
  stage: package
  only:
    - tags
  image: docker:git
  tags:
    - docker
  services:
    - docker:dind
  variables:
    LAST_COMMIT_HASH: $CI_COMMIT_SHORT_SHA
  script:
    - docker build -f release/docker/Dockerfile .
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG" -f release/docker/Dockerfile .
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"

package:prod:armv7:
  <<: *rust_stable_armv7
  stage: package
  only:
    - tags
  script:
    - bash "release/arch/armv7/build-armv7.sh" "${CI_COMMIT_TAG#v}"
  artifacts:
    paths:
      - work/bin/
    expire_in: 2 weeks

package:prod:win64:
  <<: *rust_stable_win64
  only:
    - tags
  stage: package
  script:
    - bash "release/arch/win64/build-win64.sh" "${CI_COMMIT_TAG#v}"
  artifacts:
    paths:
      - work/bin/
    expire_in: 2 weeks

.release_jobs: &release_jobs
  only:
    - tags
  image: rdadev/jinja2:py3.6
  tags:
    - axiom-dev
  script:
    - python3 .gitlab/releaser

pages:
  <<: *rust_stable_lin64
  stage: publish_doc
  only:
    <<: *ci_only_conditions
    refs:
      - dev
  except:
    <<: *ci_except_conditions
    refs:
      - tags
  script:
    - cargo doc
    - mv target/doc public
    - ls public
  artifacts:
    untracked: true
    paths:
      - public

prerelease:
  <<: *release_jobs
  stage: prerelease
  variables:
    RELEASE_BIN_DIR: work/bin/
    SOURCE_EXT: '["tar.gz", "zip"]'

release:
  <<: *release_jobs
  stage: release
  allow_failure: false
  when: manual
  variables:
    RELEASE_BIN_DIR: work/bin/
    WIKI_RELEASE: Releases