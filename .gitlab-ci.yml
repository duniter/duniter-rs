stages:
    - fmt
    - tests
    - clippy
    - publish_crate
    - publish_doc
    - package
    - prerelease
    - release

variables:
  CARGO_HOME: $CI_PROJECT_DIR/cargo

.rust_stable_lin64: &rust_stable_lin64
  image: registry.duniter.org/docker/duniter-rs-ci:v0.1.0
  tags:
    - redshift-rs-stable
  before_script:
    - export PATH="$HOME/.cargo/bin:$PATH"
    - rustup show
    - rustc --version && cargo --version

.rust_beta_lin64: &rust_beta_lin64
  image: parity/rust:gitlab-ci
  tags:
    - redshift-rs-stable
  before_script:
    - export PATH="$HOME/.cargo/bin:$PATH"
    - rustup default beta
    - rustup show && rustc --version && cargo --version

.rust_nightly_lin64: &rust_nightly_lin64
  image: rustlang/rust:nightly
  tags:
    - redshift-rs-nightly
  before_script:
    - export PATH="$HOME/.cargo/bin:$PATH"
    - rustc --version && cargo --version

.rust_stable_armv7: &rust_stable_armv7
  image: registry.duniter.org/docker/rust/armv7-builder:v0.1
  tags:
    - redshift-rs-stable
  before_script:
    - rustc --version && cargo --version

.rust_stable_win64: &rust_stable_win64
  image: registry.duniter.org/docker/rust/win64-builder:v0.1.0
  tags:
    - redshift-rs-stable
  before_script:
    - rustc --version && cargo --version

fmt:
  <<: *rust_stable_lin64
  stage: fmt
  before_script:
    - rustup show
    - cargo fmt -- --version
  script:
    - cargo fmt -- --check
  allow_failure: true
    
tests:linux64:stable:
  <<: *rust_stable_lin64
  stage: tests
  tags:
    - redshift-rs-stable
  script: 
    - cd bin/durs-server
    - cargo build --features=strict,ssl
    - cargo test --all

tests:arm-v7-:stable:
  <<: *rust_stable_armv7
  stage: tests
  script: 
    - cd bin/durs-server
    - cargo build --target=armv7-unknown-linux-gnueabihf --features=ssl
    - cargo test --all --target=armv7-unknown-linux-gnueabihf
  allow_failure: true
  when: manual
  except:
    - dev

tests:arm-v7:stable:
  <<: *rust_stable_armv7
  stage: tests
  script: 
    - cd bin/durs-server
    - cargo build --target=armv7-unknown-linux-gnueabihf --features=ssl
    - cargo test --all --target=armv7-unknown-linux-gnueabihf
  only:
    - dev

tests:win64:stable:
  <<: *rust_stable_win64
  stage: tests
  script: 
    - cd bin/durs-server
    - cargo build --target=x86_64-pc-windows-gnu
    - cargo test --package dup-crypto --target=x86_64-pc-windows-gnu
    - cargo test --package durs-wot --target=x86_64-pc-windows-gnu
    - cargo test --package dubp-documents --target=x86_64-pc-windows-gnu
    - cargo test --package durs-network-documents --target=x86_64-pc-windows-gnu
    - cargo test --package duniter-module --target=x86_64-pc-windows-gnu
    - cargo test --package duniter-network --target=x86_64-pc-windows-gnu
    - cargo test --package duniter-conf --target=x86_64-pc-windows-gnu
    - cargo test --package durs-blockchain-dal --target=x86_64-pc-windows-gnu
    - cargo test --package durs-message --target=x86_64-pc-windows-gnu
    - cargo test --package durs-blockchain --target=x86_64-pc-windows-gnu
    - cargo test --package duniter-core --target=x86_64-pc-windows-gnu
    #- cargo test --package durs-skeleton-module --target=x86_64-pc-windows-gnu
    
tests:linux64:beta:
  <<: *rust_beta_lin64
  stage: tests
  script: 
    - cd bin/durs-server
    - cargo build --features=strict,ssl
    - cargo test --all
  when: manual
  allow_failure: true
    
tests:linux64:nightly:
  <<: *rust_nightly_lin64
  stage: tests
  script: 
    - cd bin/durs-server
    - cargo build --features=strict,ssl
    - cargo test --all
  when: manual
  allow_failure: true


fmt:
  <<: *rust_stable_lin64
  stage: fmt
  before_script:
    - cargo fmt -- --version
  script:
    - cargo fmt -- --check

clippy:
  <<: *rust_stable_lin64
  before_script:
    - cargo clippy -- -V
  stage: clippy
  script:
    - cargo clippy --all -- -D warnings --verbose

publish:crate:
  <<: *rust_stable_lin64
  stage: publish_crate
  script:
    - IFS='/' read -r first a <<< "$CI_COMMIT_TAG"
    - cd $first
    - cargo login $DUNITER_CRATES_TOKEN
    - cargo publish
  only:
    - tags
  allow_failure: true
  when: manual

pages:
  <<: *rust_stable_lin64
  stage: publish_doc
  script:
    - cargo doc
    - mv target/doc public
    - ls public
  artifacts:
    untracked: true
    paths:
      - public
  allow_failure: true
  when: manual
  only:
    - dev

package:test:linux64:
  <<: *rust_stable_lin64
  stage: package
  script:
    - bash "release/arch/linux-x64/build-lin-x64.sh" "$(date +%Y%m%d).$(date +%H%M).$(date +%S)"
  cache:
    paths:
      - cargo/
      - target/
  artifacts:
    paths:
      - work/bin/
    expire_in: 1 weeks
  except:
      - tags
  when: manual

package:test:armv7:
  <<: *rust_stable_armv7
  stage: package
  script:
    - bash "release/arch/armv7/build-armv7.sh" "$(date +%Y%m%d).$(date +%H%M).$(date +%S)"
  cache:
    paths:
      - cargo/
      - target/
  artifacts:
    paths:
      - work/bin/
    expire_in: 1 weeks
  except:
      - tags
  when: manual

package:test:win64:
  <<: *rust_stable_win64
  stage: package
  script:
    - bash "release/arch/win64/build-win64.sh" "$(date +%Y%m%d).$(date +%H%M).$(date +%S)"
  cache:
    paths:
      - cargo/
      - target/
  artifacts:
    paths:
      - work/bin/
    expire_in: 1 weeks
  except:
      - tags
  when: manual

package:prod:linux64:
  <<: *rust_stable_lin64
  stage: package
  script:
    - bash "release/arch/linux-x64/build-lin-x64.sh" "${CI_COMMIT_TAG#v}"
  artifacts:
    paths:
      - work/bin/
    expire_in: 2 weeks
  only:
    - tags
  when: manual
  allow_failure: false

package:prod:armv7:
  <<: *rust_stable_armv7
  stage: package
  script:
    - bash "release/arch/armv7/build-armv7.sh" "${CI_COMMIT_TAG#v}"
  artifacts:
    paths:
      - work/bin/
    expire_in: 2 weeks
  only:
    - tags
  when: manual
  allow_failure: false

package:prod:win64:
  <<: *rust_stable_win64
  stage: package
  script:
    - bash "release/arch/win64/build-win64.sh" "${CI_COMMIT_TAG#v}"
  artifacts:
    paths:
      - work/bin/
    expire_in: 2 weeks
  only:
    - tags
  when: manual
  allow_failure: false

.release_jobs: &release_jobs
  image: tensorflow/tensorflow:latest-py3
  tags:
    - redshift-rs
  script:
    - python3 .gitlab/releaser
  only:
    - tags

prerelease:
  <<: *release_jobs
  stage: prerelease
  variables:
    RELEASE_BIN_DIR: work/bin/
    SOURCE_EXT: '["tar.gz", "zip"]'

release:
  <<: *release_jobs
  stage: release
  variables:
    RELEASE_BIN_DIR: work/bin/
    WIKI_RELEASE: Releases
  allow_failure: false
  when: manual