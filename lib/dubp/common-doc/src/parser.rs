//  Copyright (C) 2017-2019  The AXIOM TEAM Association.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

//! Provide parser for DUBP documents.

use failure::Fail;
use pest::iterators::Pair;
use pest::RuleType;
use std::net::AddrParseError;

#[derive(Debug, Clone, Copy, Parser)]
#[grammar = "documents_grammar.pest"]
/// Parser for Documents
pub struct DocumentsParser;

pub trait TextDocumentParser<R: RuleType> {
    /// Type of document generated by the parser
    type DocumentType;

    /// Parse text document from raw format
    fn parse(doc: &str) -> Result<Self::DocumentType, TextDocumentParseError>;
    /// Parse text document from pest pairs
    fn from_pest_pair(pairs: Pair<R>) -> Result<Self::DocumentType, TextDocumentParseError>;
    /// Parse text document from versioned pest pairs
    fn from_versioned_pest_pair(
        version: u16,
        pairs: Pair<R>,
    ) -> Result<Self::DocumentType, TextDocumentParseError>;
}

/// Error with pest parser (grammar)
#[derive(Debug, Clone, Eq, Fail, PartialEq)]
#[fail(display = "Grammar error: {}", _0)]
pub struct PestError(pub String);

impl<T: pest::RuleType> From<pest::error::Error<T>> for PestError {
    fn from(e: pest::error::Error<T>) -> Self {
        PestError(format!("{}", e))
    }
}

/// List of possible errors while parsing a text document.
#[derive(Debug, Clone, Eq, Fail, PartialEq)]
pub enum TextDocumentParseError {
    /// The given source don't have a valid specific document format (document type).
    #[fail(display = "TextDocumentParseError: Invalid inner format: {}", _0)]
    InvalidInnerFormat(String),
    /// Ip address parse error
    #[fail(display = "TextDocumentParseError: invalid ip: {}", _0)]
    IpAddrError(AddrParseError),
    /// Error with pest parser
    #[fail(display = "TextDocumentParseError: {}", _0)]
    PestError(PestError),
    /// Unexpected rule
    #[fail(display = "TextDocumentParseError: Unexpected rule: '{}'", _0)]
    UnexpectedRule(String),
    /// Unexpected version
    #[fail(display = "TextDocumentParseError: Unexpected version: '{}'", _0)]
    UnexpectedVersion(String),
    /// Unknown type
    #[fail(display = "TextDocumentParseError: UnknownType.")]
    UnknownType,
}

impl From<AddrParseError> for TextDocumentParseError {
    fn from(e: AddrParseError) -> Self {
        TextDocumentParseError::IpAddrError(e)
    }
}

impl From<PestError> for TextDocumentParseError {
    fn from(e: PestError) -> Self {
        TextDocumentParseError::PestError(e)
    }
}

impl<T: pest::RuleType> From<pest::error::Error<T>> for TextDocumentParseError {
    fn from(e: pest::error::Error<T>) -> Self {
        TextDocumentParseError::PestError(e.into())
    }
}
