
schema {
  query: Query
  mutation: Mutation
}

type Query {
  apiVersion: Int! @juniper(infallible: true)
  node: Node! @juniper(ownership: "owned")
  current: Block @juniper(ownership: "owned")
  block(number: Int!): Block @juniper(ownership: "owned")
  blocks(
    interval: BlockInterval,
    paging: Paging,
    step: Int = 1,
    sortOrder: SortOrder = ASC
  ): BlocksPage! @juniper(ownership: "owned")
  currentUd: CurrentUd @juniper(ownership: "owned")
}

type Mutation {
  noop: Boolean!
}

#################################
# Interval inputs
#################################

input BlockInterval {
  from: Int # default value: 0
  # If toBlock is null, current block number is used
  to: Int
}

#################################
# Pagination inputs
#################################

input Paging {
  pageNumber: Int # default value: 0
	pageSize: Int # default value: 50
}

#################################
# Sort inputs
#################################

enum SortOrder {
  ASC
  DESC
}

#################################
# NODE types
#################################

type Summary {
  software: String! @juniper(infallible: true, ownership: "owned")
  version: String! @juniper(infallible: true, ownership: "owned")
}


type Node {
  summary: Summary! @juniper(infallible: true)
}

#################################
# Blocks types
#################################

type BlocksPage {
  blocks: [Block!]!
  currentPageNumber: Int!
  intervalFrom: Int!,
  intervalTo: Int!,
  lastPageNumber: Int!,
  totalBlocksCount: Int!,
}

type Block {
  version: Int!
  currency: String!
  issuer: String!
  issuerName: String,
  issuersCount: Int!
  membersCount: Int!
  number: Int!
  hash: String!,
  commonTime: DateTimeUtc!
  powMin: Int!
}

#################################
# Custom scalars
#################################

scalar DateTimeUtc @juniper(with_time_zone: false)

#################################
# CurrentUd types
#################################

type CurrentUd {
  amount: Int!
  base: Int!
  blockNumber: Int!
  commonTime: DateTimeUtc!
  membersCount: Int!
  monetaryMass: Int!
}